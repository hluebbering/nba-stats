[
  {
    "objectID": "index.html#commonteamroster",
    "href": "index.html#commonteamroster",
    "title": "NBA API Stats",
    "section": "CommonTeamRoster",
    "text": "CommonTeamRoster\n\nfrom nba_api.stats.static import teams\nfrom nba_api.stats.endpoints import CommonTeamRoster\n\n# get_teams returns a list of 30 dictionaries, each an NBA team\nnba_teams = teams.get_teams()\nall_nba_teams = [team[\"id\"] for team in nba_teams]\n\n\n%%script false\n\n# List to hold data frames of all players info\nall_players_info = []\n\n# Loop through each team ID and get the roster data\nfor team_id in all_nba_teams:\n    common_team_roster = CommonTeamRoster(\n        team_id=team_id,\n        league_id_nullable='00',  # NBA league ID\n        season='2022-23',\n        timeout=200\n    )\n    team_roster_df = common_team_roster.get_data_frames()[0]\n    all_players_info.append(team_roster_df)\n\n# Concatenate all individual team data frames into a single data frame\nall_players_info_df = pd.concat(all_players_info, ignore_index=True)\nall_players_info_df.to_csv(\"data/nba_players.csv\")\n\nCouldn't find program: 'false'\n\n\n\n\n\n\n\n\n\n\n\n\nTeamID\nSEASON\nLeagueID\nPLAYER\nNICKNAME\nPLAYER_SLUG\nNUM\nPOSITION\nHEIGHT\nWEIGHT\nBIRTH_DATE\nAGE\nEXP\nSCHOOL\nPLAYER_ID\nHOW_ACQUIRED\n\n\n\n\n0\n1610612737\n2022\n0\nDonovan Williams\nDonovan\ndonovan-williams\nNaN\nG\n6-6\n190\nSEP 06, 2001\n21.0\nR\nUNLV\n1631495\nNaN\n\n\n1\n1610612737\n2022\n0\nBruno Fernando\nBruno\nbruno-fernando\n0.0\nF-C\n6-10\n240\nAUG 15, 1998\n24.0\n3\nMaryland\n1628981\nTraded from HOU on 02/09/23\n\n\n2\n1610612737\n2022\n0\nJalen Johnson\nJalen\njalen-johnson\n1.0\nF\n6-8\n219\nDEC 18, 2001\n21.0\n1\nDuke\n1630552\n#20 Pick in 2021 Draft\n\n\n3\n1610612737\n2022\n0\nTrent Forrest\nTrent\ntrent-forrest\n2.0\nG\n6-4\n210\nJUN 12, 1998\n25.0\n2\nFlorida State\n1630235\nSigned on 08/08/22\n\n\n4\n1610612737\n2022\n0\nAaron Holiday\nAaron\naaron-holiday\n3.0\nG\n6-0\n185\nSEP 30, 1996\n26.0\n4\nUCLA\n1628988\nNaN\n\n\n\n\n\n\n\n\n\n\nColleges\n\n# Calculate the value counts and convert to dictionary\nschool_counts_dict = all_players_info_df['SCHOOL'].value_counts().to_dict()\nschool_counts_df = pd.DataFrame(list(school_counts_dict.items()), columns=['SCHOOL', 'Count'])\n\n# Filter the DataFrame to include only rows with values &gt; 1\nfiltered_school_counts_df = school_counts_df[school_counts_df['Count'] &gt; 1]\n\n\n\nC:\\conda_tmp\\ipykernel_43692\\4198972769.py:6: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\nimport plotly.express as px\n\n# Create the scatter plot\nfig = px.scatter(bubble_df, x=\"x\", y=\"y\", custom_data=[\"l\", \"rank\", \"k\"], color=\"rank\", width=600, height=500,\n                 size=\"s\", hover_name=\"l\", size_max=70, text=\"l\",\n                 color_continuous_scale=pal_vi, opacity=0.95)\n\n# Update trace and layout settings\nfig.update_traces(\n    hovertemplate=\"%{customdata[0]}&lt;br&gt;%{customdata[2]}\",\n    texttemplate=\"&lt;b style='letter-spacing: 0.25px;text-transform:uppercase;font-family:Roboto Condensed;'&gt;%{customdata[0]}&lt;/b&gt;&lt;br&gt;%{customdata[2]}\",\n    textfont_color=font_colors,\n    textfont_size=font_size\n)\n\nfig.update_layout(\n    showlegend=False, coloraxis_showscale=False, xaxis_visible=False, yaxis_visible=False,\n    yaxis_scaleanchor=\"x\", yaxis_scaleratio=0.95, plot_bgcolor='rgba(0, 0, 0, 0)', paper_bgcolor='rgba(0, 0, 0, 0)',\n    #title={'text': \"&lt;b&gt;NBA Player Background&lt;/b&gt;\", 'y': 0.97, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'},\n    font=dict(\n        family=\"Roboto\",\n        size=12,\n        color=\"black\"\n    )\n)\n\nfig.show()"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Binary Classification - Home Team Win-Loss Modeling",
    "section": "",
    "text": "This short script imports logistic regression model class from sklearn and splits the data into test and validation sets to evaluate the performance on out of sample games.\n\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn import preprocessing \nfrom sklearn.metrics import classification_report\n\n\ndata = pd.read_csv('nbaHomeWinLossModelDataset.csv').drop(['Unnamed: 0'],axis=1)\ndata = data.dropna()\ndata.head(10)\n\n\n\n\n\n\n\n\n\nHOME_LAST_GAME_OE\nHOME_LAST_GAME_HOME_WIN_PCTG\nHOME_NUM_REST_DAYS\nHOME_LAST_GAME_AWAY_WIN_PCTG\nHOME_LAST_GAME_TOTAL_WIN_PCTG\nHOME_LAST_GAME_ROLLING_SCORING_MARGIN\nHOME_LAST_GAME_ROLLING_OE\nHOME_W\nSEASON\nAWAY_LAST_GAME_OE\nAWAY_LAST_GAME_HOME_WIN_PCTG\nAWAY_NUM_REST_DAYS\nAWAY_LAST_GAME_AWAY_WIN_PCTG\nAWAY_LAST_GAME_TOTAL_WIN_PCTG\nAWAY_LAST_GAME_ROLLING_SCORING_MARGIN\nAWAY_LAST_GAME_ROLLING_OE\n\n\n\n\n0\n0.555556\n0.685714\n3.0\n0.444444\n0.563380\n9.333333\n0.571405\n1\n2020-21\n0.612903\n0.250000\n2.0\n0.228571\n0.239437\n-2.000000\n0.605315\n\n\n1\n0.573913\n0.676471\n1.0\n0.444444\n0.557143\n-0.666667\n0.589472\n1\n2020-21\n0.500000\n0.305556\n2.0\n0.303030\n0.304348\n-18.000000\n0.512228\n\n\n2\n0.584746\n0.666667\n2.0\n0.444444\n0.550725\n8.666667\n0.640592\n1\n2020-21\n0.612403\n0.500000\n2.0\n0.428571\n0.463768\n0.666667\n0.567718\n\n\n3\n0.609756\n0.656250\n4.0\n0.444444\n0.544118\n11.333333\n0.653327\n1\n2020-21\n0.539568\n0.500000\n2.0\n0.441176\n0.470588\n0.666667\n0.570866\n\n\n4\n0.512397\n0.354839\n1.0\n0.558824\n0.461538\n11.000000\n0.596498\n1\n2020-21\n0.727273\n0.656250\n1.0\n0.457143\n0.552239\n17.333333\n0.633081\n\n\n5\n0.622951\n0.645161\n2.0\n0.457143\n0.545455\n-0.666667\n0.561996\n1\n2020-21\n0.666667\n0.735294\n1.0\n0.709677\n0.723077\n13.333333\n0.644613\n\n\n6\n0.549020\n0.633333\n2.0\n0.457143\n0.538462\n-18.333333\n0.507124\n1\n2020-21\n0.596639\n0.500000\n1.0\n0.625000\n0.562500\n16.666667\n0.599989\n\n\n7\n0.514019\n0.620690\n1.0\n0.457143\n0.531250\n-26.666667\n0.480273\n1\n2020-21\n0.521739\n0.387097\n1.0\n0.437500\n0.412698\n-7.000000\n0.568524\n\n\n8\n0.669565\n0.774194\n2.0\n0.548387\n0.661290\n12.333333\n0.569549\n1\n2020-21\n0.458333\n0.620690\n2.0\n0.470588\n0.539683\n-17.000000\n0.489968\n\n\n9\n0.596774\n0.766667\n2.0\n0.548387\n0.655738\n-4.666667\n0.549138\n1\n2020-21\n0.468468\n0.620690\n2.0\n0.484848\n0.548387\n2.666667\n0.540221\n\n\n\n\n\n\n\n\n\nvalidation = data[data['SEASON'] == '2022-23']\nmodelData = data[data['SEASON'] != '2022-23'].sample(frac=1)\n\n\nX = modelData.drop(['HOME_W','SEASON'],axis=1)\ny = modelData['HOME_W']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=.33)\n\n# Standard Scaling Prediction Variables\nscaler = preprocessing.StandardScaler()\nscaler.fit(X_train)\nscaled_data_train = scaler.transform(X_train)\n\nscaler.fit(X_test)\nscaled_data_test = scaler.transform(X_test)\n\n\n#Logistic Regression\n\nmodel = LogisticRegression()\nmodel.fit(scaled_data_train,y_train)\nmodel.score(scaled_data_test,y_test)\n\n0.614441416893733\n\n\n\nF1Score = cross_val_score(model,scaled_data_test,y_test,cv=12,scoring='f1_macro');\nprint(\"Logistic Model F1 Accuracy: %0.2f (+/- %0.2f)\"%(F1Score.mean(), F1Score.std() *2))\n\nLogistic Model F1 Accuracy: 0.61 (+/- 0.12)\n\n\n\n# Test Set Review\n\ny_pred = model.predict(scaled_data_test)\nprint(classification_report(y_test,y_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.60      0.47      0.53       336\n           1       0.62      0.74      0.68       398\n\n    accuracy                           0.61       734\n   macro avg       0.61      0.60      0.60       734\nweighted avg       0.61      0.61      0.61       734\n\n\n\n\n#Validation Set review\n\n# Standard Scaling Prediction Variables\nscaler = preprocessing.StandardScaler()\nscaler.fit(validation.drop(['HOME_W','SEASON'],axis=1))\nscaled_val_data = scaler.transform(validation.drop(['HOME_W','SEASON'],axis=1))\n\n\n# How the model performs on unseen data\ny_pred = model.predict(scaled_val_data)\nprint(classification_report(validation['HOME_W'],y_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.49      0.47      0.48       210\n           1       0.68      0.70      0.69       338\n\n    accuracy                           0.61       548\n   macro avg       0.59      0.59      0.59       548\nweighted avg       0.61      0.61      0.61       548"
  }
]
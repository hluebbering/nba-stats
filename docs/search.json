[
  {
    "objectID": "index.html#commonteamroster",
    "href": "index.html#commonteamroster",
    "title": "NBA API Stats",
    "section": "CommonTeamRoster",
    "text": "CommonTeamRoster\n\nfrom nba_api.stats.endpoints import CommonTeamRoster\nall_nba_teams = [team[\"id\"] for team in nba_teams]\n\n\n%%script false\n\n# List to hold data frames of all players info\nall_players_info = []\n\n# Loop through each team ID and get the roster data\nfor team_id in all_nba_teams:\n    common_team_roster = CommonTeamRoster(\n        team_id=team_id,\n        league_id_nullable='00',  # NBA league ID\n        season='2023-24',\n        timeout=200\n    )\n    team_roster_df = common_team_roster.get_data_frames()[0]\n    all_players_info.append(team_roster_df)\n\n# Concatenate all individual team data frames into a single data frame\nall_players_info_df = pd.concat(all_players_info, ignore_index=True)\nall_players_info_df.to_csv(\"data/nba_players.csv\",index=False)\n\nCouldn't find program: 'false'\n\n\n\n\n\n\n\n\n\n\n\n\nTeamID\nSEASON\nLeagueID\nPLAYER\nNICKNAME\nPLAYER_SLUG\nNUM\nPOSITION\nHEIGHT\nWEIGHT\nBIRTH_DATE\nAGE\nEXP\nSCHOOL\nPLAYER_ID\nHOW_ACQUIRED\n\n\n\n\n0\n1610612737\n2023\n0\nJalen Johnson\nJalen\njalen-johnson\n1.0\nF\n6-8\n219\nDEC 18, 2001\n22.0\n2\nDuke\n1630552\n#20 Pick in 2021 Draft\n\n\n1\n1610612737\n2023\n0\nTrent Forrest\nTrent\ntrent-forrest\n2.0\nG\n6-4\n210\nJUN 12, 1998\n25.0\n3\nFlorida State\n1630235\nSigned on 08/08/22\n\n\n2\n1610612737\n2023\n0\nSeth Lundy\nSeth\nseth-lundy\n3.0\nG-F\n6-4\n220\nAPR 02, 2000\n24.0\nR\nPenn State\n1641754\n#46 Pick in 2023 Draft\n\n\n3\n1610612737\n2023\n0\nKobe Bufkin\nKobe\nkobe-bufkin\n4.0\nG\n6-5\n195\nSEP 21, 2003\n20.0\nR\nMichigan\n1641723\n#15 Pick in 2023 Draft\n\n\n4\n1610612737\n2023\n0\nDejounte Murray\nDejounte\ndejounte-murray\n5.0\nG\n6-5\n180\nSEP 19, 1996\n27.0\n6\nWashington\n1627749\nTraded from SAS on 06/30/22\n\n\n\n\n\n\n\n\n\n\nColleges\n\n\n                                                \n\n\n\n\n\nTeam Player Dashboard\n\n%%script false\n\nfrom nba_api.stats.endpoints import TeamPlayerDashboard\n\nall_team_headlines = [] # List to hold data frames of all team info\nall_player_headlines = []  # List to hold data frames of all player info\n\n# Loop through each team ID and get the player dashboard data\nfor team_id in all_nba_teams:\n    team_dashboard = TeamPlayerDashboard(\n        team_id=team_id,\n        season=\"2023-24\",\n        league_id_nullable='00'\n        )\n    all_team_headlines.append(team_dashboard.get_data_frames()[0])\n    all_player_headlines.append(team_dashboard.get_data_frames()[1])\n\n# Combine all individual team data frames into a single data frame\nteam_info_df = pd.concat(all_team_headlines, ignore_index=True)\nteam_players_info_df = pd.concat(all_player_headlines, ignore_index=True)\n\nCouldn't find program: 'false'\n\n\n\n# Join with previous dataset all_players_info_df on PLAYER_ID\nmerged_df = pd.merge(all_players_info_df, team_players_info_df, on='PLAYER_ID', how='inner')\n\n\n\n\n\n\n\n\n\n\n\nTEAM_ID\nSEASON\nPLAYER_ID\nPLAYER\nGP\nW\nL\nMIN\nFGM\nFGA\n...\nPLUS_MINUS\nNBA_FANTASY_PTS\nPOSITION\nHEIGHT\nWEIGHT\nBIRTH_DATE\nAGE\nEXP\nSCHOOL\nHOW_ACQUIRED\n\n\n\n\n0\n1610612737\n2023\n1630552\nJalen Johnson\n56\n27\n29\n1888.866667\n359\n702\n...\n-76\n2027.1\nF\n6-8\n219\nDEC 18, 2001\n22.0\n2\nDuke\n#20 Pick in 2021 Draft\n\n\n1\n1610612737\n2023\n1630235\nTrent Forrest\n38\n18\n20\n413.761667\n34\n90\n...\n-94\n304.2\nG\n6-4\n210\nJUN 12, 1998\n25.0\n3\nFlorida State\nSigned on 08/08/22\n\n\n2\n1610612737\n2023\n1641754\nSeth Lundy\n9\n2\n7\n51.983333\n4\n17\n...\n-13\n21.4\nG-F\n6-4\n220\nAPR 02, 2000\n24.0\nR\nPenn State\n#46 Pick in 2023 Draft\n\n\n3\n1610612737\n2023\n1641723\nKobe Bufkin\n17\n8\n9\n196.003333\n34\n92\n...\n-35\n187.1\nG\n6-5\n195\nSEP 21, 2003\n20.0\nR\nMichigan\n#15 Pick in 2023 Draft\n\n\n4\n1610612737\n2023\n1627749\nDejounte Murray\n78\n34\n44\n2783.343333\n672\n1463\n...\n-154\n3209.2\nG\n6-5\n180\nSEP 19, 1996\n27.0\n6\nWashington\nTraded from SAS on 06/30/22\n\n\n\n\n5 rows × 33 columns"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Binary Classification - Home Team Win-Loss Modeling",
    "section": "",
    "text": "This short script imports logistic regression model class from sklearn and splits the data into test and validation sets to evaluate the performance on out of sample games.\n\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn import preprocessing \nfrom sklearn.metrics import classification_report\n\n\ndata = pd.read_csv('nbaHomeWinLossModelDataset.csv').drop(['Unnamed: 0'],axis=1)\ndata = data.dropna()\ndata.head(10)\n\n\n\n\n\n\n\n\n\nHOME_LAST_GAME_OE\nHOME_LAST_GAME_HOME_WIN_PCTG\nHOME_NUM_REST_DAYS\nHOME_LAST_GAME_AWAY_WIN_PCTG\nHOME_LAST_GAME_TOTAL_WIN_PCTG\nHOME_LAST_GAME_ROLLING_SCORING_MARGIN\nHOME_LAST_GAME_ROLLING_OE\nHOME_W\nSEASON\nAWAY_LAST_GAME_OE\nAWAY_LAST_GAME_HOME_WIN_PCTG\nAWAY_NUM_REST_DAYS\nAWAY_LAST_GAME_AWAY_WIN_PCTG\nAWAY_LAST_GAME_TOTAL_WIN_PCTG\nAWAY_LAST_GAME_ROLLING_SCORING_MARGIN\nAWAY_LAST_GAME_ROLLING_OE\n\n\n\n\n0\n0.555556\n0.685714\n3.0\n0.444444\n0.563380\n9.333333\n0.571405\n1\n2020-21\n0.612903\n0.250000\n2.0\n0.228571\n0.239437\n-2.000000\n0.605315\n\n\n1\n0.573913\n0.676471\n1.0\n0.444444\n0.557143\n-0.666667\n0.589472\n1\n2020-21\n0.500000\n0.305556\n2.0\n0.303030\n0.304348\n-18.000000\n0.512228\n\n\n2\n0.584746\n0.666667\n2.0\n0.444444\n0.550725\n8.666667\n0.640592\n1\n2020-21\n0.612403\n0.500000\n2.0\n0.428571\n0.463768\n0.666667\n0.567718\n\n\n3\n0.609756\n0.656250\n4.0\n0.444444\n0.544118\n11.333333\n0.653327\n1\n2020-21\n0.539568\n0.500000\n2.0\n0.441176\n0.470588\n0.666667\n0.570866\n\n\n4\n0.512397\n0.354839\n1.0\n0.558824\n0.461538\n11.000000\n0.596498\n1\n2020-21\n0.727273\n0.656250\n1.0\n0.457143\n0.552239\n17.333333\n0.633081\n\n\n5\n0.622951\n0.645161\n2.0\n0.457143\n0.545455\n-0.666667\n0.561996\n1\n2020-21\n0.666667\n0.735294\n1.0\n0.709677\n0.723077\n13.333333\n0.644613\n\n\n6\n0.549020\n0.633333\n2.0\n0.457143\n0.538462\n-18.333333\n0.507124\n1\n2020-21\n0.596639\n0.500000\n1.0\n0.625000\n0.562500\n16.666667\n0.599989\n\n\n7\n0.514019\n0.620690\n1.0\n0.457143\n0.531250\n-26.666667\n0.480273\n1\n2020-21\n0.521739\n0.387097\n1.0\n0.437500\n0.412698\n-7.000000\n0.568524\n\n\n8\n0.669565\n0.774194\n2.0\n0.548387\n0.661290\n12.333333\n0.569549\n1\n2020-21\n0.458333\n0.620690\n2.0\n0.470588\n0.539683\n-17.000000\n0.489968\n\n\n9\n0.596774\n0.766667\n2.0\n0.548387\n0.655738\n-4.666667\n0.549138\n1\n2020-21\n0.468468\n0.620690\n2.0\n0.484848\n0.548387\n2.666667\n0.540221\n\n\n\n\n\n\n\n\n\nvalidation = data[data['SEASON'] == '2022-23']\nmodelData = data[data['SEASON'] != '2022-23'].sample(frac=1)\n\n\nX = modelData.drop(['HOME_W','SEASON'],axis=1)\ny = modelData['HOME_W']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=.33)\n\n# Standard Scaling Prediction Variables\nscaler = preprocessing.StandardScaler()\nscaler.fit(X_train)\nscaled_data_train = scaler.transform(X_train)\n\nscaler.fit(X_test)\nscaled_data_test = scaler.transform(X_test)\n\n\n#Logistic Regression\n\nmodel = LogisticRegression()\nmodel.fit(scaled_data_train,y_train)\nmodel.score(scaled_data_test,y_test)\n\n0.614441416893733\n\n\n\nF1Score = cross_val_score(model,scaled_data_test,y_test,cv=12,scoring='f1_macro');\nprint(\"Logistic Model F1 Accuracy: %0.2f (+/- %0.2f)\"%(F1Score.mean(), F1Score.std() *2))\n\nLogistic Model F1 Accuracy: 0.61 (+/- 0.12)\n\n\n\n# Test Set Review\n\ny_pred = model.predict(scaled_data_test)\nprint(classification_report(y_test,y_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.60      0.47      0.53       336\n           1       0.62      0.74      0.68       398\n\n    accuracy                           0.61       734\n   macro avg       0.61      0.60      0.60       734\nweighted avg       0.61      0.61      0.61       734\n\n\n\n\n#Validation Set review\n\n# Standard Scaling Prediction Variables\nscaler = preprocessing.StandardScaler()\nscaler.fit(validation.drop(['HOME_W','SEASON'],axis=1))\nscaled_val_data = scaler.transform(validation.drop(['HOME_W','SEASON'],axis=1))\n\n\n# How the model performs on unseen data\ny_pred = model.predict(scaled_val_data)\nprint(classification_report(validation['HOME_W'],y_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.49      0.47      0.48       210\n           1       0.68      0.70      0.69       338\n\n    accuracy                           0.61       548\n   macro avg       0.59      0.59      0.59       548\nweighted avg       0.61      0.61      0.61       548"
  },
  {
    "objectID": "index.html#player-statistics",
    "href": "index.html#player-statistics",
    "title": "NBA API Stats",
    "section": "Player Statistics",
    "text": "Player Statistics\n\nmerged_df2 = pd.merge(merged_df, team_info_df, on='TEAM_ID', how='inner')\n\n\nPoints Per Game\n\n# Calculate points per game\nmerged_df2['PPG'] = merged_df2['PTS'] / merged_df2['GP']\n\n\n\nPlayer Impact Estimate (PIE) score\n(PTS + FGM + FTM - FGA - FTA + DREB + (.5 * OREB) + AST + STL + (.5 * BLK) - PF - TO) / (GmPTS + GmFGM + GmFTM - GmFGA - GmFTA + GmDREB + (.5 * GmOREB) + GmAST + GmSTL + (.5 * GmBLK) - GmPF - GmTO)\nThe Player Impact Estimate (PIE) is a comprehensive metric that estimates a player’s overall statistical contribution against the total statistics in games they play. The NBA’s official definition of PIE is:\n$ = $\n\n\nPlayer’s Stats: Include points, field goals made, field goals attempted, free throws made, free throws attempted, offensive rebounds, defensive rebounds, assists, steals, blocks, turnovers, and personal fouls.\nTeam’s Stats: Sum of all players’ stats on the team.\nOpponent’s Stats: Sum of all players’ stats on the opponent team.\nTeam’s Total Stats: Total of all the team stats, including points, field goals, free throws, rebounds, assists, steals, blocks, turnovers, and fouls.\nOpponent’s Total Stats: Same as above, but for the opponent team.\n\n\nThe formula is: \\(\\text{PIE} = \\frac{\\text{PTS} + \\text{FGM} + \\text{FTM} - \\text{FGA} - \\text{FTA} + \\text{OREB} + \\text{DREB} + \\text{AST} + \\text{STL} + \\text{BLK} - \\text{TO} - \\text{PF}}{\\text{Team's Total Stats} + \\text{Opponent's Total Stats}}\\)\n\n# Calculate player's contribution\nplayer_contrib = (merged_df2[\"PTS\"] + merged_df2[\"FGM\"] + merged_df2[\"FTM\"] -\n                  merged_df2[\"FGA\"] - merged_df2[\"FTA\"] + merged_df2[\"OREB\"] +\n                  merged_df2[\"DREB\"] + merged_df2[\"AST\"] + merged_df2[\"STL\"] +\n                  merged_df2[\"BLK\"] - merged_df2['TOV'] - merged_df2[\"PF\"])\n\n# Calculate team and opponent total stats\nteam_total_stats = (merged_df2['PTS_TEAM'] + merged_df2['FGM_TEAM'] + merged_df2['FTM_TEAM'] -\n                    merged_df2['FGA_TEAM'] - merged_df2['FTA_TEAM'] + merged_df2['OREB_TEAM'] +\n                    merged_df2['DREB_TEAM'] + merged_df2['AST_TEAM'] + merged_df2['STL_TEAM'] +\n                    merged_df2['BLK_TEAM'] - merged_df2['TOV_TEAM'] - merged_df2['PF_TEAM'])\n\n# Calculate PIE\nmerged_df2['PIE'] = (player_contrib/team_total_stats)*100\n\n\n\n\nPER\nFunctions for Calculating PER Variants:\n\ncalculate_uPER: Calculates the unadjusted Player Efficiency Rating (uPER) using basic player statistics such as points, rebounds, assists, turnovers, and games played.\ncalculate_aPER: Adjusts uPER based on the team’s pace relative to the league average, yielding the adjusted PER (aPER).\ncalculate_nPER: Normalizes aPER so that the league average is set to a constant value of 15, resulting in the normalized PER (nPER).\n\n\nfrom nba_api.stats.endpoints import leaguedashteamstats, playercareerstats\n\ndef fetch_pace_data(season):\n    team_stats = leaguedashteamstats.LeagueDashTeamStats(season=season, measure_type_detailed_defense='Advanced')\n    team_data = team_stats.get_data_frames()[0]\n    pace_data = team_data[['TEAM_ID', 'PACE']]\n    league_pace = pace_data['PACE'].mean()\n    return pace_data, league_pace\n\n# Fetch player stats and team pace data\nteam_pace_data, league_pace = fetch_pace_data(season = '2023-24')\n\n\ndef calculate_PER(df, league_pace):\n    # Calculate the basic components of PER\n    df['REB'] = df['OREB'] + df['DREB']\n    df['PER'] = (df['PTS'] + df['REB'] + df['AST'] + df['STL'] + df['BLK'] - (df['FGA'] - df['FGM']) - (df['FTA'] - df['FTM']) - df['TOV'])\n    df['uPER'] = (df['PTS'] + df['REB'] + df['AST'] - df['TOV']) / df['GP']\n    df['aPER'] = df['uPER'] * (league_pace / df['PACE'])\n\n    league_average_aPER = df['aPER'].mean(skipna=True)\n    df['nPER'] = df['aPER'] * (15 / league_average_aPER)\n\n    return df\n\n# Apply the function to calculate PER and uPER\nmerged_df3 = pd.merge(merged_df2, team_pace_data, on='TEAM_ID', how='inner')\nmerged_df3 = calculate_PER(merged_df3, league_pace)\n\n\n\nTop Players Based on uPER:\n\n\n\n\n\n\n\n\n\n\nindex\nPLAYER\nSCHOOL\nPIE\nPPG\nPER\nuPER\naPER\nnPER\n\n\n\n\n0\n102\nLuka Doncic\nReal Madrid\n25.667828\n33.857143\n2580\n48.871429\n48.167181\n53.186126\n\n\n1\n321\nJoel Embiid\nKansas\n15.146262\n34.692308\n1510\n47.487179\n47.961390\n52.958892\n\n\n2\n114\nNikola Jokic\nMega Basket\n28.636135\n26.392405\n3039\n44.708861\n45.498291\n50.239141\n\n\n3\n220\nGiannis Antetokounmpo\nFilathlitikos\n25.131051\n30.438356\n2655\n45.054795\n44.445308\n49.076439\n\n\n4\n398\nShai Gilgeous-Alexander\nKentucky\n21.912429\n30.053333\n2416\n39.626667\n38.958822\n43.018270\n\n\n5\n175\nAnthony Davis\nKentucky\n23.352704\n24.684211\n2548\n38.736842\n37.884896\n41.832443\n\n\n6\n266\nJalen Brunson\nVillanova\n20.116650\n28.727273\n1972\n36.662338\n37.881232\n41.828397\n\n\n7\n369\nDomantas Sabonis\nGonzaga\n25.818452\n19.426829\n2679\n37.975610\n37.853568\n41.797850\n\n\n8\n18\nJayson Tatum\nDuke\n17.978804\n26.851351\n2045\n37.351351\n37.797499\n41.735939\n\n\n9\n186\nLeBron James\nSt. Vincent-St. Mary HS (OH)\n20.171378\n25.661972\n2126\n37.802817\n36.971413\n40.823777\n\n\n10\n328\nDevin Booker\nKentucky\n16.401955\n27.073529\n1817\n35.926471\n35.981026\n39.730192\n\n\n11\n458\nJa Morant\nMurray State\n2.635812\n25.111111\n232\n35.777778\n35.948304\n39.694060\n\n\n12\n271\nJulius Randle\nKentucky\n11.004732\n23.956522\n1125\n34.673913\n35.826699\n39.559785\n\n\n13\n342\nKevin Durant\nTexas\n19.771941\n27.093333\n2075\n35.480000\n35.533877\n39.236451\n\n\n14\n52\nDonovan Mitchell\nLouisville\n13.884754\n26.600000\n1424\n34.945455\n35.493275\n39.191618\n\n\n15\n311\nTyrese Maxey\nKentucky\n16.370531\n25.942857\n1662\n34.157143\n34.498239\n38.092901\n\n\n16\n5\nTrae Young\nOklahoma\n12.963942\n25.722222\n1335\n34.925926\n34.340710\n37.918958\n\n\n17\n365\nDe'Aaron Fox\nKentucky\n16.772959\n26.567568\n1771\n34.189189\n34.079315\n37.630327\n\n\n18\n227\nAnthony Edwards\nGeorgia\n18.218366\n25.936709\n1863\n33.455696\n33.921090\n37.455615\n\n\n19\n505\nLaMelo Ball\nIllawarra\n5.380785\n23.909091\n522\n33.272727\n33.725230\n37.239346\n\n\n20\n94\nKyrie Irving\nDuke\n14.475768\n25.637931\n1483\n33.965517\n33.476067\n36.964221\n\n\n21\n135\nStephen Curry\nDavidson\n16.374987\n26.432432\n1717\n33.175676\n32.923424\n36.353993\n\n\n22\n152\nAlperen Sengun\nBesiktas\n15.868397\n21.126984\n1629\n32.857143\n32.712086\n36.120634\n\n\n23\n76\nDeMar DeRozan\nSouthern California\n18.742429\n24.012658\n1863\n31.936709\n32.664899\n36.068530\n\n\n24\n208\nDamian Lillard\nWeber State\n16.332614\n24.315068\n1723\n33.013699\n32.567100\n35.960541\n\n\n25\n280\nPaolo Banchero\nDuke\n18.252964\n22.550000\n1739\n31.775000\n32.355981\n35.727423\n\n\n26\n157\nKawhi Leonard\nSan Diego State\n17.097043\n23.720588\n1739\n31.676471\n32.071200\n35.412969\n\n\n27\n197\nBam Adebayo\nKentucky\n18.114973\n19.253521\n1785\n31.267606\n32.000346\n35.334732\n\n\n28\n293\nTyrese Haliburton\nIowa State\n16.903062\n20.130435\n1803\n32.652174\n31.690230\n34.992303\n\n\n29\n444\nLauri Markkanen\nArizona\n13.263023\n23.236364\n1345\n32.000000\n31.645828\n34.943273\n\n\n30\n381\nVictor Wembanyama\nMetropolitans 92\n18.908236\n21.436620\n1923\n32.267606\n31.427739\n34.702460\n\n\n31\n421\nScottie Barnes\nFlorida State\n15.161184\n19.850000\n1496\n31.383333\n31.144710\n34.389940\n\n\n32\n4\nDejounte Murray\nWashington\n17.151316\n22.474359\n1760\n31.666667\n31.136063\n34.380392\n\n\n33\n462\nDesmond Bane\nTCU\n9.998763\n23.738095\n928\n30.952381\n31.099908\n34.340469\n\n\n34\n54\nZion Williamson\nDuke\n15.712950\n22.871429\n1672\n30.942857\n31.084039\n34.322947\n\n\n35\n75\nNikola Vucevic\nSouthern California\n17.365929\n18.026316\n1767\n30.328947\n31.020479\n34.252764\n\n\n36\n238\nKarl-Anthony Towns\nKentucky\n13.192975\n21.758065\n1451\n30.258065\n30.678977\n33.875679\n\n\n37\n487\nCade Cunningham\nOklahoma State\n13.998805\n22.661290\n1324\n31.048387\n30.646669\n33.840004\n\n\n38\n309\nPascal Siakam\nNew Mexico State\n8.617823\n21.268293\n987\n31.341463\n30.418134\n33.587656\n\n\n39\n118\nJamal Murray\nKentucky\n12.118772\n21.186441\n1308\n29.677966\n30.201994\n33.348994\n\n\n40\n504\nMiles Bridges\nMichigan State\n16.263816\n21.000000\n1457\n29.666667\n30.070128\n33.203388\n\n\n41\n20\nJaylen Brown\nCalifornia\n12.272899\n23.000000\n1482\n29.714286\n30.069211\n33.202376\n\n\n42\n202\nJimmy Butler\nMarquette\n14.772727\n20.766667\n1394\n29.333333\n30.020745\n33.148860\n\n\n43\n163\nPaul George\nFresno State\n14.941691\n22.581081\n1637\n29.297297\n29.662379\n32.753153\n\n\n44\n423\nRJ Barrett\nDuke\n6.788426\n21.750000\n701\n29.718750\n29.492783\n32.565885\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSCHOOL\nCOUNT\nAVG_PER\nPER_WEIGHTED\n\n\n\n\n0\nKentucky\n27\n22.202\n95.376\n\n\n1\nDuke\n24\n19.723\n82.404\n\n\n6\nGonzaga\n10\n20.362\n67.247\n\n\n5\nVillanova\n10\n18.732\n61.864\n\n\n37\nMega Basket\n4\n24.955\n59.550\n\n\n44\nOklahoma\n3\n27.301\n57.294\n\n\n10\nArizona\n9\n17.865\n57.118\n\n\n47\nGeorgia\n3\n26.130\n54.837\n\n\n8\nSouthern California\n10\n16.526\n54.579\n\n\n15\nFlorida State\n8\n17.598\n54.192\n\n\n23\nMichigan State\n6\n19.399\n54.157\n\n\n2\nUCLA\n14\n14.763\n53.723\n\n\n39\nLouisville\n4\n21.886\n52.226\n\n\n7\nMichigan\n10\n15.707\n51.874\n\n\n14\nLouisiana State\n8\n16.674\n51.347\n\n\n3\nKansas\n12\n14.590\n50.845\n\n\n40\nColorado\n4\n21.014\n50.146\n\n\n16\nTexas\n8\n16.195\n49.872\n\n\n151\nFilathlitikos\n1\n49.076\n49.076\n\n\n49\nReal Madrid\n3\n22.667\n47.569\n\n\n\n\n\n\n\n\n\n#merged_df.to_csv(\"data/merged_df.csv\", index=None)"
  }
]